// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SqlGenerator.sdk.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Sources\SqlGenerator\src\SqlGenerator.sdk\Templates\RawToCultivatedScript.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class RawToCultivatedScript : RawToCultivatedScriptBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"

DECLARE @env AS NVARCHAR(16) = (SELECT @@SERVERNAME)
DECLARE @src_storage_acct NVARCHAR(256)

IF @env = 'asapcoretest'
BEGIN	
 SET @src_storage_acct = 'https://asapadlstest.blob.core.windows.net'
END
ELSE IF @env = 'asapcorepp'
BEGIN	
 SET @src_storage_acct = 'https://asapadlspp.blob.core.windows.net'
END
ELSE IF  @env = 'asapcore'
BEGIN	
 SET @src_storage_acct = 'https://asapadls.blob.core.windows.net'
END


PRINT CONCAT('@env:',@env)
PRINT CONCAT('@src_storage_acct',@src_storage_acct)


/*****************************************************
--Global Metadata
******************************************************/
DECLARE @pipeline_name AS NVARCHAR(260) = N'");
            
            #line 32 "D:\Sources\SqlGenerator\src\SqlGenerator.sdk\Templates\RawToCultivatedScript.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PipelineName));
            
            #line default
            #line hidden
            this.Write("\';\r\nDECLARE @activity_name AS NVARCHAR(260) = N\'");
            
            #line 33 "D:\Sources\SqlGenerator\src\SqlGenerator.sdk\Templates\RawToCultivatedScript.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ActivityName));
            
            #line default
            #line hidden
            this.Write("\';\r\n\r\n/*****************************************************\r\n--Pipeline Metadata" +
                    "\r\n******************************************************/\r\nDROP TABLE IF EXISTS " +
                    "#pipeline;\r\n\r\nSELECT TOP 1 pipeline_name, trigger_type INTO #pipeline FROM cntrl" +
                    ".pipeline;\r\n\r\nTRUNCATE TABLE #pipeline;\r\n\r\nINSERT INTO #pipeline (pipeline_name," +
                    " trigger_type) VALUES (@pipeline_name, \'scheduled_daily\');\r\n\r\nPRINT \'Merge Pipel" +
                    "ine\';\r\n\r\nMERGE cntrl.pipeline tgt\r\nUSING #pipeline src\r\nON tgt.pipeline_name = s" +
                    "rc.pipeline_name\r\n   AND tgt.trigger_type = src.trigger_type\r\nWHEN NOT MATCHED T" +
                    "HEN INSERT (pipeline_name, trigger_type)\r\n                      VALUES\r\n        " +
                    "              (src.pipeline_name, src.trigger_type);\r\n\r\n/***********************" +
                    "******************************\r\n--Activity Metadata\r\n***************************" +
                    "***************************/\r\nDROP TABLE IF EXISTS #activity;\r\n\r\nSELECT TOP 1\r\n " +
                    "      activity_name,\r\n       pipeline_id,\r\n       pipeline_name,\r\n       activit" +
                    "y_type,\r\n       step_number,\r\n       is_rerunnable,\r\n       retry,\r\n       retry" +
                    "_interval,\r\n       activity_timeout\r\nINTO\r\n #activity\r\nFROM\r\n cntrl.activity;\r\n\r" +
                    "\nDECLARE @pipeline_id BIGINT = (SELECT pipeline_id FROM cntrl.pipeline WHERE pip" +
                    "eline_name = @pipeline_name);\r\n\r\nTRUNCATE TABLE #activity;\r\n\r\nINSERT INTO #activ" +
                    "ity (activity_name, pipeline_id, pipeline_name, activity_type, step_number, is_r" +
                    "erunnable, retry, retry_interval, activity_timeout)\r\nVALUES\r\n(@activity_name, @p" +
                    "ipeline_id, @pipeline_name, \'copy_query\', 1, 1, 3, 5, 1800);\r\n\r\nPRINT \'Merge Act" +
                    "ivity\';\r\n\r\nMERGE cntrl.activity tgt\r\nUSING #activity src\r\nON tgt.activity_name =" +
                    " src.activity_name\r\n   AND tgt.pipeline_id = src.pipeline_id\r\n   AND tgt.pipelin" +
                    "e_name = src.pipeline_name\r\n   AND tgt.activity_type = src.activity_type\r\nWHEN M" +
                    "ATCHED AND (\r\n              ISNULL(tgt.pipeline_name, \'0\') <> ISNULL(src.pipelin" +
                    "e_name, \'0\')\r\n              OR ISNULL(tgt.activity_type, \'0\') <> ISNULL(src.acti" +
                    "vity_type, \'0\')\r\n              OR ISNULL(tgt.step_number, \'0\') <> ISNULL(src.ste" +
                    "p_number, \'0\')\r\n              OR ISNULL(tgt.is_rerunnable, \'0\') <> ISNULL(src.is" +
                    "_rerunnable, \'0\')\r\n              OR ISNULL(tgt.retry, \'0\') <> ISNULL(src.retry, " +
                    "\'0\')\r\n              OR ISNULL(tgt.retry_interval, \'0\') <> ISNULL(src.retry_inter" +
                    "val, \'0\')\r\n              OR ISNULL(tgt.activity_timeout, \'0\') <> ISNULL(src.acti" +
                    "vity_timeout, \'0\')\r\n             ) THEN UPDATE SET\r\n                     tgt.act" +
                    "ivity_name = src.activity_name,\r\n                     tgt.pipeline_id = src.pipe" +
                    "line_id,\r\n                     tgt.pipeline_name = src.pipeline_name,\r\n         " +
                    "            tgt.activity_type = src.activity_type,\r\n                     tgt.ste" +
                    "p_number = src.step_number,\r\n                     tgt.is_rerunnable = src.is_rer" +
                    "unnable,\r\n                     tgt.retry = src.retry,\r\n                     tgt." +
                    "retry_interval = src.retry_interval,\r\n                     tgt.activity_timeout " +
                    "= src.activity_timeout,\r\n                     tgt.update_dttm = GETUTCDATE(),\r\n " +
                    "                    tgt.updated_by = SUSER_SNAME()\r\nWHEN NOT MATCHED THEN INSERT" +
                    " (activity_name, pipeline_id, pipeline_name, activity_type, step_number, is_reru" +
                    "nnable, retry, retry_interval, activity_timeout)\r\n                      VALUES\r\n" +
                    "                      (src.activity_name, src.pipeline_id, src.pipeline_name, sr" +
                    "c.activity_type, src.step_number, src.is_rerunnable, src.retry, src.retry_interv" +
                    "al, src.activity_timeout);\r\n\r\n/*************************************************" +
                    "****\r\n--Activity Parameters\r\n***************************************************" +
                    "***/\r\nDROP TABLE IF EXISTS #activity_parameter;\r\n\r\nSELECT TOP 1\r\n       activity" +
                    "_id,\r\n       activity_name,\r\n       activity_type,\r\n       context,\r\n       para" +
                    "m_name,\r\n       param_value\r\nINTO\r\n #activity_parameter\r\nFROM\r\n cntrl.activity_p" +
                    "arameter;\r\n\r\nDECLARE @activity_id BIGINT = (SELECT activity_id FROM cntrl.activi" +
                    "ty WHERE activity_name = @activity_name AND pipeline_id = @pipeline_id);\r\n\r\nTRUN" +
                    "CATE TABLE #activity_parameter;\r\n\r\nINSERT INTO #activity_parameter (activity_id," +
                    " activity_name, activity_type, context, param_name, param_value)\r\nVALUES\r\n--Sour" +
                    "ce\t\t\t\t\t\t\t\t\t\t\t\r\n(@activity_id, @activity_name, \'copy_cmd\', \'Source\', \'src_linked_" +
                    "service\', \'ls_sql_server\'),\r\n(@activity_id, @activity_name, \'copy_cmd\', \'Source\'" +
                    ", \'subject_area\', \'copycmd\'),\r\n(@activity_id, @activity_name, \'copy_cmd\', \'Sourc" +
                    "e\', \'query_timeout\', \'120\'),         --Default \'120\'\r\n                          " +
                    "                                                            --file options\r\n(@ac" +
                    "tivity_id, @activity_name, \'copy_cmd\', \'Source\', \'file_compression\', \'None\'),   " +
                    "  --gzip, None, snappy, zip, tar\r\n(@activity_id, @activity_name, \'copy_cmd\', \'So" +
                    "urce\', \'compression_level\', \'Optimal\'), --Fastest, Optimal\r\n(@activity_id, @acti" +
                    "vity_name, \'copy_cmd\', \'Source\', \'field_terminator\', \'||\'),        --| or ,\r\n(@a" +
                    "ctivity_id, @activity_name, \'copy_cmd\', \'Source\', \'row_terminator\', \'\\n\'),      " +
                    " --\r\n(@activity_id, @activity_name, \'copy_cmd\', \'Source\', \'field_quote\', \'\"\'),  " +
                    "           --\"\r\n(@activity_id, @activity_name, \'copy_cmd\', \'Source\', \'encoding\'," +
                    " \'UTF-8\'),            --\r\n(@activity_id, @activity_name, \'copy_cmd\', \'Source\', \'" +
                    "max_errors\', \'10\'),\r\n(@activity_id, @activity_name, \'copy_cmd\', \'Source\', \'file_" +
                    "type\', \'csv\'),\r\n(@activity_id, @activity_name, \'copy_cmd\', \'Source\', \'first_row\'" +
                    ", \'2\'),\r\n(@activity_id, @activity_name, \'copy_cmd\', \'Source\', \'src_storage_acct\'" +
                    ",  @src_storage_acct),\r\n(@activity_id, @activity_name, \'copy_cmd\', \'Source\', \'sr" +
                    "c_container\', \'raw\'),\r\n(@activity_id, @activity_name, \'copy_cmd\', \'Source\', \'src" +
                    "_directory\', \'Neto\'),\r\n(@activity_id, @activity_name, \'copy_cmd\', \'Source\', \'src" +
                    "_filepath_pattern\', \'yyyy/MM/dd\'),\r\n(@activity_id, @activity_name, \'copy_cmd\', \'" +
                    "Source\', \'src_file_type\', \'csv\'),\r\n(@activity_id, @activity_name, \'copy_cmd\', \'S" +
                    "ource\', \'error_file_container\', \'raw\'),\r\n(@activity_id, @activity_name, \'copy_cm" +
                    "d\', \'Source\', \'skip_line_count\', \'1\'),                                          " +
                    "                                            \r\n(@activity_id, @activity_name, \'co" +
                    "py_cmd\', \'Source\', \'ingest_schema\', \'ing_Neto\'),          \r\n(@activity_id, @acti" +
                    "vity_name, \'copy_cmd\', \'Source\', \'cultivated_schema_name\', \'clt_Neto\'),         " +
                    " \r\n(@activity_id, @activity_name, \'copy_cmd\', \'Source\', \'latest_version_orderby_" +
                    "mapping\', \'ASAP_SRC_FILEPATH\'),\r\n(@activity_id, @activity_name, \'copy_cmd\', \'Sou" +
                    "rce\', \'ASAP_RecordEffectiveDateTime_mapping\', NULL),\r\n(@activity_id, @activity_n" +
                    "ame, \'copy_cmd\', \'Source\', \'tgt_linked_service\', \'asap_syn\'),\r\n(@activity_id, @a" +
                    "ctivity_name, \'copy_cmd\', \'Source\', \'parent_key\', \'LNUM\'),\r\n(@activity_id, @acti" +
                    "vity_name, \'copy_cmd\', \'Source\', \'date_from_format\', \'YYYYMMDD_HHMMSS\');\r\n\r\nPRIN" +
                    "T \'Merge Activity Parameter\';\r\n\r\nMERGE cntrl.activity_parameter tgt\r\nUSING #acti" +
                    "vity_parameter src\r\nON tgt.activity_id = src.activity_id\r\n   AND tgt.activity_na" +
                    "me = src.activity_name\r\n   AND tgt.activity_type = src.activity_type\r\n   AND tgt" +
                    ".context = src.context\r\n   AND tgt.param_name = src.param_name\r\nWHEN MATCHED AND" +
                    " ISNULL(tgt.param_value, \'0\') <> ISNULL(src.param_value, \'0\') THEN UPDATE SET\r\n " +
                    "                                                                                " +
                    "   tgt.param_value = src.param_value,\r\n                                         " +
                    "                                           tgt.update_dttm = GETUTCDATE(),\r\n    " +
                    "                                                                                " +
                    "tgt.updated_by = SUSER_SNAME()\r\nWHEN NOT MATCHED THEN INSERT (activity_id, activ" +
                    "ity_name, activity_type, context, param_name, param_value)\r\n                    " +
                    "  VALUES\r\n                      (src.activity_id, src.activity_name, src.activit" +
                    "y_type, src.context, src.param_name, src.param_value);\r\n\r\n/*********************" +
                    "********************************\r\n--Data Object Parameters\r\n********************" +
                    "**********************************/\r\nDROP TABLE IF EXISTS #data_object_parameter" +
                    ";\r\n\r\nSELECT TOP 1\r\n       data_object_name,\r\n       activity_id,\r\n       activit" +
                    "y_name,\r\n       is_enabled,\r\n       context,\r\n       param_name,\r\n       param_v" +
                    "alue\r\nINTO\r\n #data_object_parameter\r\nFROM\r\n cntrl.data_object_parameter;\r\n\r\n\r\nTR" +
                    "UNCATE TABLE #data_object_parameter;\r\n\r\nINSERT INTO #data_object_parameter (data" +
                    "_object_name, activity_id, activity_name, is_enabled, context, param_name, param" +
                    "_value)\r\nVALUES\r\n\r\n--Query Option 3: Lookup Column, generated in copy parameter\r" +
                    "\n/************copy_into_test************/\r\n\r\n");
            
            #line 212 "D:\Sources\SqlGenerator\src\SqlGenerator.sdk\Templates\RawToCultivatedScript.tt"

foreach(var item in GetTableNames())
{
    WriteLine(item);
}


            
            #line default
            #line hidden
            this.Write(@"
PRINT 'Merge Data Object Parameter';

MERGE cntrl.data_object_parameter tgt
USING #data_object_parameter src
ON tgt.data_object_name = src.data_object_name
   AND tgt.activity_id = src.activity_id
   AND tgt.activity_name = src.activity_name
   AND tgt.context = src.context
   AND tgt.param_name = src.param_name
WHEN MATCHED AND (ISNULL(tgt.param_value, '0') <> ISNULL(src.param_value, '0') OR tgt.is_enabled <> src.is_enabled) THEN UPDATE SET
                                                                                                                          tgt.param_value = src.param_value,
                                                                                                                          tgt.is_enabled = src.is_enabled,
                                                                                                                          tgt.update_dttm = GETUTCDATE(),
                                                                                                                          tgt.updated_by = SUSER_SNAME()
WHEN NOT MATCHED THEN INSERT (data_object_name, activity_id, activity_name, is_enabled, context, param_name, param_value)
                      VALUES
                      (src.data_object_name, src.activity_id, src.activity_name, src.is_enabled, src.context, src.param_name, src.param_value);
GO
");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class RawToCultivatedScriptBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
